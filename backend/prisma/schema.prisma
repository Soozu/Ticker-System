// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER")
  department String
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id                    Int       @id @default(autoincrement())
  category              String?    // TROUBLESHOOTING, ACCOUNT_MANAGEMENT, DOCUMENT_UPLOAD
  name                  String?
  email                 String?
  department            String?    // Department field for SDO tickets
  priority              String?    // HIGH, MEDIUM, LOW
  status                String?    @default("PENDING") // PENDING, IN_PROGRESS, RESOLVED, CLOSED
  trackingId            String?    @unique
  createdAt             DateTime?  @default(now())
  updatedAt             DateTime?  @updatedAt

  // ICT Support Details
  ictAssignedTo        String?    // Name of ICT staff assigned
  ictDiagnosisDetails  String?    @db.Text  // Detailed diagnosis of the issue
  ictFixDetails        String?    @db.Text  // Details of how the issue was fixed
  ictDateFixed         DateTime?  // When the issue was fixed
  ictRecommendations   String?    @db.Text  // Recommendations for preventing similar issues

  // Troubleshooting specific fields
  location              String?   // SDO - Imus City, School - Imus City
  dateOfRequest         DateTime?
  typeOfEquipment       String?
  modelOfEquipment      String?
  serialNo              String?
  specificProblem       String?

  // Account Management specific fields
  accountType           String?   // Gmail Account, M365 Account, LIS Account, LMS Account, Adobe Account
  actionType            String?   // CREATE, RESET
  locationType         String?   // SDO, SCHOOL
  schoolLevel          String?   // Elementary, Junior High School, Senior High School, Integrated School
  schoolName           String?   // Name of the school
  subject               String?
  message               String?   @db.Text

  // Document Upload specific fields
  documentSubject       String?   // For document upload tickets
  documentMessage       String?   // For document upload tickets
  documentPath          String?   // Path to the uploaded document

  // Category specific details stored as JSON
  categorySpecificDetails Json?

  // Relations
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  comments    Comment[]
  updates     TicketUpdate[]
  attachments Attachment[]

  @@index([category])
  @@index([status])
  @@index([email])
  @@index([trackingId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add the TicketUpdate model
model TicketUpdate {
  id             Int      @id @default(autoincrement())
  ticketId       Int
  ticket         Ticket   @relation(fields: [ticketId], references: [id])
  adminId        Int
  previousStatus String
  newStatus      String
  comment        String   @db.Text
  createdAt      DateTime @default(now())
  
  @@index([ticketId])
}

model Attachment {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  mimetype  String
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ticketId])
} 